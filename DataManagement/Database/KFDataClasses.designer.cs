#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataManagement.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="generalDB")]
	public partial class KFDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertColour(Colour instance);
    partial void UpdateColour(Colour instance);
    partial void DeleteColour(Colour instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertGrip(Grip instance);
    partial void UpdateGrip(Grip instance);
    partial void DeleteGrip(Grip instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertProduct_Colour(Product_Colour instance);
    partial void UpdateProduct_Colour(Product_Colour instance);
    partial void DeleteProduct_Colour(Product_Colour instance);
    partial void InsertProduct_Grip(Product_Grip instance);
    partial void UpdateProduct_Grip(Product_Grip instance);
    partial void DeleteProduct_Grip(Product_Grip instance);
    partial void InsertProduct_Material(Product_Material instance);
    partial void UpdateProduct_Material(Product_Material instance);
    partial void DeleteProduct_Material(Product_Material instance);
    partial void InsertProductGroup(ProductGroup instance);
    partial void UpdateProductGroup(ProductGroup instance);
    partial void DeleteProductGroup(ProductGroup instance);
    partial void InsertOrder_Product(Order_Product instance);
    partial void UpdateOrder_Product(Order_Product instance);
    partial void DeleteOrder_Product(Order_Product instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public KFDataClassesDataContext() : 
				base(global::DataManagement.Properties.Settings.Default.generalDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KFDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Colour> Colours
		{
			get
			{
				return this.GetTable<Colour>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Grip> Grips
		{
			get
			{
				return this.GetTable<Grip>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Product_Colour> Product_Colours
		{
			get
			{
				return this.GetTable<Product_Colour>();
			}
		}
		
		public System.Data.Linq.Table<Product_Grip> Product_Grips
		{
			get
			{
				return this.GetTable<Product_Grip>();
			}
		}
		
		public System.Data.Linq.Table<Product_Material> Product_Materials
		{
			get
			{
				return this.GetTable<Product_Material>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup> ProductGroups
		{
			get
			{
				return this.GetTable<ProductGroup>();
			}
		}
		
		public System.Data.Linq.Table<Order_Product> Order_Products
		{
			get
			{
				return this.GetTable<Order_Product>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colours")]
	public partial class Colour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Colour_Id;
		
		private string _Colour_Name;
		
		private EntitySet<Product_Colour> _Product_Colours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColour_IdChanging(int value);
    partial void OnColour_IdChanged();
    partial void OnColour_NameChanging(string value);
    partial void OnColour_NameChanged();
    #endregion
		
		public Colour()
		{
			this._Product_Colours = new EntitySet<Product_Colour>(new Action<Product_Colour>(this.attach_Product_Colours), new Action<Product_Colour>(this.detach_Product_Colours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colour_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Colour_Id
		{
			get
			{
				return this._Colour_Id;
			}
			set
			{
				if ((this._Colour_Id != value))
				{
					this.OnColour_IdChanging(value);
					this.SendPropertyChanging();
					this._Colour_Id = value;
					this.SendPropertyChanged("Colour_Id");
					this.OnColour_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colour_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Colour_Name
		{
			get
			{
				return this._Colour_Name;
			}
			set
			{
				if ((this._Colour_Name != value))
				{
					this.OnColour_NameChanging(value);
					this.SendPropertyChanging();
					this._Colour_Name = value;
					this.SendPropertyChanged("Colour_Name");
					this.OnColour_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colour_Product_Colour", Storage="_Product_Colours", ThisKey="Colour_Id", OtherKey="Colour_Id")]
		public EntitySet<Product_Colour> Product_Colours
		{
			get
			{
				return this._Product_Colours;
			}
			set
			{
				this._Product_Colours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product_Colours(Product_Colour entity)
		{
			this.SendPropertyChanging();
			entity.Colour = this;
		}
		
		private void detach_Product_Colours(Product_Colour entity)
		{
			this.SendPropertyChanging();
			entity.Colour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Streetname;
		
		private string _City;
		
		private int _Zipcode;
		
		private int _Phonenumber;
		
		private string _Email;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreetnameChanging(string value);
    partial void OnStreetnameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZipcodeChanging(int value);
    partial void OnZipcodeChanged();
    partial void OnPhonenumberChanging(int value);
    partial void OnPhonenumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Streetname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Streetname
		{
			get
			{
				return this._Streetname;
			}
			set
			{
				if ((this._Streetname != value))
				{
					this.OnStreetnameChanging(value);
					this.SendPropertyChanging();
					this._Streetname = value;
					this.SendPropertyChanged("Streetname");
					this.OnStreetnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="Int NOT NULL")]
		public int Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phonenumber", DbType="Int NOT NULL")]
		public int Phonenumber
		{
			get
			{
				return this._Phonenumber;
			}
			set
			{
				if ((this._Phonenumber != value))
				{
					this.OnPhonenumberChanging(value);
					this.SendPropertyChanging();
					this._Phonenumber = value;
					this.SendPropertyChanged("Phonenumber");
					this.OnPhonenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="Customer_Id", OtherKey="Customer_Id")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grips")]
	public partial class Grip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Grip_Id;
		
		private string _Grip_Name;
		
		private EntitySet<Product_Grip> _Product_Grips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrip_IdChanging(int value);
    partial void OnGrip_IdChanged();
    partial void OnGrip_NameChanging(string value);
    partial void OnGrip_NameChanged();
    #endregion
		
		public Grip()
		{
			this._Product_Grips = new EntitySet<Product_Grip>(new Action<Product_Grip>(this.attach_Product_Grips), new Action<Product_Grip>(this.detach_Product_Grips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grip_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Grip_Id
		{
			get
			{
				return this._Grip_Id;
			}
			set
			{
				if ((this._Grip_Id != value))
				{
					this.OnGrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Grip_Id = value;
					this.SendPropertyChanged("Grip_Id");
					this.OnGrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grip_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Grip_Name
		{
			get
			{
				return this._Grip_Name;
			}
			set
			{
				if ((this._Grip_Name != value))
				{
					this.OnGrip_NameChanging(value);
					this.SendPropertyChanging();
					this._Grip_Name = value;
					this.SendPropertyChanged("Grip_Name");
					this.OnGrip_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grip_Product_Grip", Storage="_Product_Grips", ThisKey="Grip_Id", OtherKey="Grip_Id")]
		public EntitySet<Product_Grip> Product_Grips
		{
			get
			{
				return this._Product_Grips;
			}
			set
			{
				this._Product_Grips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product_Grips(Product_Grip entity)
		{
			this.SendPropertyChanging();
			entity.Grip = this;
		}
		
		private void detach_Product_Grips(Product_Grip entity)
		{
			this.SendPropertyChanging();
			entity.Grip = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Material_Id;
		
		private string _Material_Name;
		
		private EntitySet<Product_Material> _Product_Materials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterial_IdChanging(int value);
    partial void OnMaterial_IdChanged();
    partial void OnMaterial_NameChanging(string value);
    partial void OnMaterial_NameChanged();
    #endregion
		
		public Material()
		{
			this._Product_Materials = new EntitySet<Product_Material>(new Action<Product_Material>(this.attach_Product_Materials), new Action<Product_Material>(this.detach_Product_Materials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Material_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Material_Id
		{
			get
			{
				return this._Material_Id;
			}
			set
			{
				if ((this._Material_Id != value))
				{
					this.OnMaterial_IdChanging(value);
					this.SendPropertyChanging();
					this._Material_Id = value;
					this.SendPropertyChanged("Material_Id");
					this.OnMaterial_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Material_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Material_Name
		{
			get
			{
				return this._Material_Name;
			}
			set
			{
				if ((this._Material_Name != value))
				{
					this.OnMaterial_NameChanging(value);
					this.SendPropertyChanging();
					this._Material_Name = value;
					this.SendPropertyChanged("Material_Name");
					this.OnMaterial_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Product_Material", Storage="_Product_Materials", ThisKey="Material_Id", OtherKey="Material_Id")]
		public EntitySet<Product_Material> Product_Materials
		{
			get
			{
				return this._Product_Materials;
			}
			set
			{
				this._Product_Materials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product_Materials(Product_Material entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Product_Materials(Product_Material entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Order_Id;
		
		private int _Customer_Id;
		
		private int _Employee_Id;
		
		private string _To_Firstname;
		
		private string _To_Lastname;
		
		private int _To_Phonenumber;
		
		private string _To_Street;
		
		private string _To_City;
		
		private int _To_Zipcode;
		
		private System.DateTime _DateOfSending;
		
		private string _Order_Comment;
		
		private EntitySet<Order_Product> _Order_Products;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    partial void OnEmployee_IdChanging(int value);
    partial void OnEmployee_IdChanged();
    partial void OnTo_FirstnameChanging(string value);
    partial void OnTo_FirstnameChanged();
    partial void OnTo_LastnameChanging(string value);
    partial void OnTo_LastnameChanged();
    partial void OnTo_PhonenumberChanging(int value);
    partial void OnTo_PhonenumberChanged();
    partial void OnTo_StreetChanging(string value);
    partial void OnTo_StreetChanged();
    partial void OnTo_CityChanging(string value);
    partial void OnTo_CityChanged();
    partial void OnTo_ZipcodeChanging(int value);
    partial void OnTo_ZipcodeChanged();
    partial void OnDateOfSendingChanging(System.DateTime value);
    partial void OnDateOfSendingChanged();
    partial void OnOrder_CommentChanging(string value);
    partial void OnOrder_CommentChanged();
    #endregion
		
		public Order()
		{
			this._Order_Products = new EntitySet<Order_Product>(new Action<Order_Product>(this.attach_Order_Products), new Action<Order_Product>(this.detach_Order_Products));
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", DbType="Int NOT NULL")]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Id", DbType="Int NOT NULL")]
		public int Employee_Id
		{
			get
			{
				return this._Employee_Id;
			}
			set
			{
				if ((this._Employee_Id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IdChanging(value);
					this.SendPropertyChanging();
					this._Employee_Id = value;
					this.SendPropertyChanged("Employee_Id");
					this.OnEmployee_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string To_Firstname
		{
			get
			{
				return this._To_Firstname;
			}
			set
			{
				if ((this._To_Firstname != value))
				{
					this.OnTo_FirstnameChanging(value);
					this.SendPropertyChanging();
					this._To_Firstname = value;
					this.SendPropertyChanged("To_Firstname");
					this.OnTo_FirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string To_Lastname
		{
			get
			{
				return this._To_Lastname;
			}
			set
			{
				if ((this._To_Lastname != value))
				{
					this.OnTo_LastnameChanging(value);
					this.SendPropertyChanging();
					this._To_Lastname = value;
					this.SendPropertyChanged("To_Lastname");
					this.OnTo_LastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Phonenumber", DbType="Int NOT NULL")]
		public int To_Phonenumber
		{
			get
			{
				return this._To_Phonenumber;
			}
			set
			{
				if ((this._To_Phonenumber != value))
				{
					this.OnTo_PhonenumberChanging(value);
					this.SendPropertyChanging();
					this._To_Phonenumber = value;
					this.SendPropertyChanged("To_Phonenumber");
					this.OnTo_PhonenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Street", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string To_Street
		{
			get
			{
				return this._To_Street;
			}
			set
			{
				if ((this._To_Street != value))
				{
					this.OnTo_StreetChanging(value);
					this.SendPropertyChanging();
					this._To_Street = value;
					this.SendPropertyChanged("To_Street");
					this.OnTo_StreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string To_City
		{
			get
			{
				return this._To_City;
			}
			set
			{
				if ((this._To_City != value))
				{
					this.OnTo_CityChanging(value);
					this.SendPropertyChanging();
					this._To_City = value;
					this.SendPropertyChanged("To_City");
					this.OnTo_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Zipcode", DbType="Int NOT NULL")]
		public int To_Zipcode
		{
			get
			{
				return this._To_Zipcode;
			}
			set
			{
				if ((this._To_Zipcode != value))
				{
					this.OnTo_ZipcodeChanging(value);
					this.SendPropertyChanging();
					this._To_Zipcode = value;
					this.SendPropertyChanged("To_Zipcode");
					this.OnTo_ZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSending", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSending
		{
			get
			{
				return this._DateOfSending;
			}
			set
			{
				if ((this._DateOfSending != value))
				{
					this.OnDateOfSendingChanging(value);
					this.SendPropertyChanging();
					this._DateOfSending = value;
					this.SendPropertyChanged("DateOfSending");
					this.OnDateOfSendingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Order_Comment
		{
			get
			{
				return this._Order_Comment;
			}
			set
			{
				if ((this._Order_Comment != value))
				{
					this.OnOrder_CommentChanging(value);
					this.SendPropertyChanging();
					this._Order_Comment = value;
					this.SendPropertyChanged("Order_Comment");
					this.OnOrder_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_Product", Storage="_Order_Products", ThisKey="Order_Id", OtherKey="Order_Id")]
		public EntitySet<Order_Product> Order_Products
		{
			get
			{
				return this._Order_Products;
			}
			set
			{
				this._Order_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="Customer_Id", OtherKey="Customer_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Customer_Id = value.Customer_Id;
					}
					else
					{
						this._Customer_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Employee", ThisKey="Employee_Id", OtherKey="Employee_Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Employee_Id = value.Employee_Id;
					}
					else
					{
						this._Employee_Id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order_Products(Order_Product entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Order_Products(Order_Product entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Colours")]
	public partial class Product_Colour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Junction_Id;
		
		private int _Product_Id;
		
		private int _Colour_Id;
		
		private EntityRef<Colour> _Colour;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJunction_IdChanging(int value);
    partial void OnJunction_IdChanged();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnColour_IdChanging(int value);
    partial void OnColour_IdChanged();
    #endregion
		
		public Product_Colour()
		{
			this._Colour = default(EntityRef<Colour>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Junction_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Junction_Id
		{
			get
			{
				return this._Junction_Id;
			}
			set
			{
				if ((this._Junction_Id != value))
				{
					this.OnJunction_IdChanging(value);
					this.SendPropertyChanging();
					this._Junction_Id = value;
					this.SendPropertyChanged("Junction_Id");
					this.OnJunction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", DbType="Int NOT NULL")]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colour_Id", DbType="Int NOT NULL")]
		public int Colour_Id
		{
			get
			{
				return this._Colour_Id;
			}
			set
			{
				if ((this._Colour_Id != value))
				{
					if (this._Colour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColour_IdChanging(value);
					this.SendPropertyChanging();
					this._Colour_Id = value;
					this.SendPropertyChanged("Colour_Id");
					this.OnColour_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colour_Product_Colour", Storage="_Colour", ThisKey="Colour_Id", OtherKey="Colour_Id", IsForeignKey=true)]
		public Colour Colour
		{
			get
			{
				return this._Colour.Entity;
			}
			set
			{
				Colour previousValue = this._Colour.Entity;
				if (((previousValue != value) 
							|| (this._Colour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Colour.Entity = null;
						previousValue.Product_Colours.Remove(this);
					}
					this._Colour.Entity = value;
					if ((value != null))
					{
						value.Product_Colours.Add(this);
						this._Colour_Id = value.Colour_Id;
					}
					else
					{
						this._Colour_Id = default(int);
					}
					this.SendPropertyChanged("Colour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Colour", Storage="_Product", ThisKey="Product_Id", OtherKey="Product_Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Product_Colours.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Product_Colours.Add(this);
						this._Product_Id = value.Product_Id;
					}
					else
					{
						this._Product_Id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Grips")]
	public partial class Product_Grip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Junction_Id;
		
		private int _Product_Id;
		
		private int _Grip_Id;
		
		private EntityRef<Grip> _Grip;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJunction_IdChanging(int value);
    partial void OnJunction_IdChanged();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnGrip_IdChanging(int value);
    partial void OnGrip_IdChanged();
    #endregion
		
		public Product_Grip()
		{
			this._Grip = default(EntityRef<Grip>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Junction_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Junction_Id
		{
			get
			{
				return this._Junction_Id;
			}
			set
			{
				if ((this._Junction_Id != value))
				{
					this.OnJunction_IdChanging(value);
					this.SendPropertyChanging();
					this._Junction_Id = value;
					this.SendPropertyChanged("Junction_Id");
					this.OnJunction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", DbType="Int NOT NULL")]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grip_Id", DbType="Int NOT NULL")]
		public int Grip_Id
		{
			get
			{
				return this._Grip_Id;
			}
			set
			{
				if ((this._Grip_Id != value))
				{
					if (this._Grip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Grip_Id = value;
					this.SendPropertyChanged("Grip_Id");
					this.OnGrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grip_Product_Grip", Storage="_Grip", ThisKey="Grip_Id", OtherKey="Grip_Id", IsForeignKey=true)]
		public Grip Grip
		{
			get
			{
				return this._Grip.Entity;
			}
			set
			{
				Grip previousValue = this._Grip.Entity;
				if (((previousValue != value) 
							|| (this._Grip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grip.Entity = null;
						previousValue.Product_Grips.Remove(this);
					}
					this._Grip.Entity = value;
					if ((value != null))
					{
						value.Product_Grips.Add(this);
						this._Grip_Id = value.Grip_Id;
					}
					else
					{
						this._Grip_Id = default(int);
					}
					this.SendPropertyChanged("Grip");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Grip", Storage="_Product", ThisKey="Product_Id", OtherKey="Product_Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Product_Grips.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Product_Grips.Add(this);
						this._Product_Id = value.Product_Id;
					}
					else
					{
						this._Product_Id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Materials")]
	public partial class Product_Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Junction_Id;
		
		private int _Product_Id;
		
		private int _Material_Id;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJunction_IdChanging(int value);
    partial void OnJunction_IdChanged();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnMaterial_IdChanging(int value);
    partial void OnMaterial_IdChanged();
    #endregion
		
		public Product_Material()
		{
			this._Material = default(EntityRef<Material>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Junction_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Junction_Id
		{
			get
			{
				return this._Junction_Id;
			}
			set
			{
				if ((this._Junction_Id != value))
				{
					this.OnJunction_IdChanging(value);
					this.SendPropertyChanging();
					this._Junction_Id = value;
					this.SendPropertyChanged("Junction_Id");
					this.OnJunction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", DbType="Int NOT NULL")]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Material_Id", DbType="Int NOT NULL")]
		public int Material_Id
		{
			get
			{
				return this._Material_Id;
			}
			set
			{
				if ((this._Material_Id != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterial_IdChanging(value);
					this.SendPropertyChanging();
					this._Material_Id = value;
					this.SendPropertyChanged("Material_Id");
					this.OnMaterial_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Product_Material", Storage="_Material", ThisKey="Material_Id", OtherKey="Material_Id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Product_Materials.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Product_Materials.Add(this);
						this._Material_Id = value.Material_Id;
					}
					else
					{
						this._Material_Id = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Material", Storage="_Product", ThisKey="Product_Id", OtherKey="Product_Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Product_Materials.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Product_Materials.Add(this);
						this._Product_Id = value.Product_Id;
					}
					else
					{
						this._Product_Id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroup")]
	public partial class ProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductGroup_Id;
		
		private string _ProductGroupName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductGroup_IdChanging(int value);
    partial void OnProductGroup_IdChanged();
    partial void OnProductGroupNameChanging(string value);
    partial void OnProductGroupNameChanged();
    #endregion
		
		public ProductGroup()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductGroup_Id
		{
			get
			{
				return this._ProductGroup_Id;
			}
			set
			{
				if ((this._ProductGroup_Id != value))
				{
					this.OnProductGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup_Id = value;
					this.SendPropertyChanged("ProductGroup_Id");
					this.OnProductGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroupName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string ProductGroupName
		{
			get
			{
				return this._ProductGroupName;
			}
			set
			{
				if ((this._ProductGroupName != value))
				{
					this.OnProductGroupNameChanging(value);
					this.SendPropertyChanging();
					this._ProductGroupName = value;
					this.SendPropertyChanged("ProductGroupName");
					this.OnProductGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_Products", ThisKey="ProductGroup_Id", OtherKey="ProductGroup_Id")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_Product")]
	public partial class Order_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Junction_Id;
		
		private int _Order_Id;
		
		private int _Product_Id;
		
		private int _Product_Count;
		
		private int _Product_Colour;
		
		private int _Product_Material;
		
		private int _Product_Grip;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJunction_IdChanging(int value);
    partial void OnJunction_IdChanged();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnProduct_CountChanging(int value);
    partial void OnProduct_CountChanged();
    partial void OnProduct_ColourChanging(int value);
    partial void OnProduct_ColourChanged();
    partial void OnProduct_MaterialChanging(int value);
    partial void OnProduct_MaterialChanged();
    partial void OnProduct_GripChanging(int value);
    partial void OnProduct_GripChanged();
    #endregion
		
		public Order_Product()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Junction_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Junction_Id
		{
			get
			{
				return this._Junction_Id;
			}
			set
			{
				if ((this._Junction_Id != value))
				{
					this.OnJunction_IdChanging(value);
					this.SendPropertyChanging();
					this._Junction_Id = value;
					this.SendPropertyChanged("Junction_Id");
					this.OnJunction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", DbType="Int NOT NULL")]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", DbType="Int NOT NULL")]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Count", DbType="Int NOT NULL")]
		public int Product_Count
		{
			get
			{
				return this._Product_Count;
			}
			set
			{
				if ((this._Product_Count != value))
				{
					this.OnProduct_CountChanging(value);
					this.SendPropertyChanging();
					this._Product_Count = value;
					this.SendPropertyChanged("Product_Count");
					this.OnProduct_CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Colour", DbType="Int NOT NULL")]
		public int Product_Colour
		{
			get
			{
				return this._Product_Colour;
			}
			set
			{
				if ((this._Product_Colour != value))
				{
					this.OnProduct_ColourChanging(value);
					this.SendPropertyChanging();
					this._Product_Colour = value;
					this.SendPropertyChanged("Product_Colour");
					this.OnProduct_ColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Material", DbType="Int NOT NULL")]
		public int Product_Material
		{
			get
			{
				return this._Product_Material;
			}
			set
			{
				if ((this._Product_Material != value))
				{
					this.OnProduct_MaterialChanging(value);
					this.SendPropertyChanging();
					this._Product_Material = value;
					this.SendPropertyChanged("Product_Material");
					this.OnProduct_MaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Grip", DbType="Int NOT NULL")]
		public int Product_Grip
		{
			get
			{
				return this._Product_Grip;
			}
			set
			{
				if ((this._Product_Grip != value))
				{
					this.OnProduct_GripChanging(value);
					this.SendPropertyChanging();
					this._Product_Grip = value;
					this.SendPropertyChanged("Product_Grip");
					this.OnProduct_GripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_Product", Storage="_Order", ThisKey="Order_Id", OtherKey="Order_Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Order_Products.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Order_Products.Add(this);
						this._Order_Id = value.Order_Id;
					}
					else
					{
						this._Order_Id = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_Product", Storage="_Product", ThisKey="Product_Id", OtherKey="Product_Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Order_Products.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Order_Products.Add(this);
						this._Product_Id = value.Product_Id;
					}
					else
					{
						this._Product_Id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Employee_Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _Phonenumber;
		
		private int _Salary;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployee_IdChanging(int value);
    partial void OnEmployee_IdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhonenumberChanging(int value);
    partial void OnPhonenumberChanged();
    partial void OnSalaryChanging(int value);
    partial void OnSalaryChanged();
    #endregion
		
		public Employee()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Employee_Id
		{
			get
			{
				return this._Employee_Id;
			}
			set
			{
				if ((this._Employee_Id != value))
				{
					this.OnEmployee_IdChanging(value);
					this.SendPropertyChanging();
					this._Employee_Id = value;
					this.SendPropertyChanged("Employee_Id");
					this.OnEmployee_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phonenumber", DbType="Int NOT NULL")]
		public int Phonenumber
		{
			get
			{
				return this._Phonenumber;
			}
			set
			{
				if ((this._Phonenumber != value))
				{
					this.OnPhonenumberChanging(value);
					this.SendPropertyChanging();
					this._Phonenumber = value;
					this.SendPropertyChanged("Phonenumber");
					this.OnPhonenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int NOT NULL")]
		public int Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Orders", ThisKey="Employee_Id", OtherKey="Employee_Id")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_Id;
		
		private int _ProductGroup_Id;
		
		private string _ProductName;
		
		private int _Price;
		
		private string _Product_Description;
		
		private decimal _Length;
		
		private decimal _Height;
		
		private decimal _Width;
		
		private EntitySet<Product_Colour> _Product_Colours;
		
		private EntitySet<Product_Grip> _Product_Grips;
		
		private EntitySet<Product_Material> _Product_Materials;
		
		private EntitySet<Order_Product> _Order_Products;
		
		private EntityRef<ProductGroup> _ProductGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IdChanging(int value);
    partial void OnProduct_IdChanged();
    partial void OnProductGroup_IdChanging(int value);
    partial void OnProductGroup_IdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnProduct_DescriptionChanging(string value);
    partial void OnProduct_DescriptionChanged();
    partial void OnLengthChanging(decimal value);
    partial void OnLengthChanged();
    partial void OnHeightChanging(decimal value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(decimal value);
    partial void OnWidthChanged();
    #endregion
		
		public Product()
		{
			this._Product_Colours = new EntitySet<Product_Colour>(new Action<Product_Colour>(this.attach_Product_Colours), new Action<Product_Colour>(this.detach_Product_Colours));
			this._Product_Grips = new EntitySet<Product_Grip>(new Action<Product_Grip>(this.attach_Product_Grips), new Action<Product_Grip>(this.detach_Product_Grips));
			this._Product_Materials = new EntitySet<Product_Material>(new Action<Product_Material>(this.attach_Product_Materials), new Action<Product_Material>(this.detach_Product_Materials));
			this._Order_Products = new EntitySet<Order_Product>(new Action<Order_Product>(this.attach_Order_Products), new Action<Order_Product>(this.detach_Order_Products));
			this._ProductGroup = default(EntityRef<ProductGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_Id
		{
			get
			{
				return this._Product_Id;
			}
			set
			{
				if ((this._Product_Id != value))
				{
					this.OnProduct_IdChanging(value);
					this.SendPropertyChanging();
					this._Product_Id = value;
					this.SendPropertyChanged("Product_Id");
					this.OnProduct_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup_Id", DbType="Int NOT NULL")]
		public int ProductGroup_Id
		{
			get
			{
				return this._ProductGroup_Id;
			}
			set
			{
				if ((this._ProductGroup_Id != value))
				{
					if (this._ProductGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup_Id = value;
					this.SendPropertyChanged("ProductGroup_Id");
					this.OnProductGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Product_Description
		{
			get
			{
				return this._Product_Description;
			}
			set
			{
				if ((this._Product_Description != value))
				{
					this.OnProduct_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Product_Description = value;
					this.SendPropertyChanged("Product_Description");
					this.OnProduct_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(15,2) NOT NULL")]
		public decimal Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(15,2) NOT NULL")]
		public decimal Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Decimal(15,2) NOT NULL")]
		public decimal Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Colour", Storage="_Product_Colours", ThisKey="Product_Id", OtherKey="Product_Id")]
		public EntitySet<Product_Colour> Product_Colours
		{
			get
			{
				return this._Product_Colours;
			}
			set
			{
				this._Product_Colours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Grip", Storage="_Product_Grips", ThisKey="Product_Id", OtherKey="Product_Id")]
		public EntitySet<Product_Grip> Product_Grips
		{
			get
			{
				return this._Product_Grips;
			}
			set
			{
				this._Product_Grips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Material", Storage="_Product_Materials", ThisKey="Product_Id", OtherKey="Product_Id")]
		public EntitySet<Product_Material> Product_Materials
		{
			get
			{
				return this._Product_Materials;
			}
			set
			{
				this._Product_Materials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_Product", Storage="_Order_Products", ThisKey="Product_Id", OtherKey="Product_Id")]
		public EntitySet<Order_Product> Order_Products
		{
			get
			{
				return this._Order_Products;
			}
			set
			{
				this._Order_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_ProductGroup", ThisKey="ProductGroup_Id", OtherKey="ProductGroup_Id", IsForeignKey=true)]
		public ProductGroup ProductGroup
		{
			get
			{
				return this._ProductGroup.Entity;
			}
			set
			{
				ProductGroup previousValue = this._ProductGroup.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductGroup.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductGroup_Id = value.ProductGroup_Id;
					}
					else
					{
						this._ProductGroup_Id = default(int);
					}
					this.SendPropertyChanged("ProductGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product_Colours(Product_Colour entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Product_Colours(Product_Colour entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Product_Grips(Product_Grip entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Product_Grips(Product_Grip entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Product_Materials(Product_Material entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Product_Materials(Product_Material entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Order_Products(Order_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Order_Products(Order_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
}
#pragma warning restore 1591
